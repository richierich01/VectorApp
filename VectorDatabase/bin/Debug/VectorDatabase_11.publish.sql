/*
Deployment script for VectorDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "VectorDB"
:setvar DefaultFilePrefix "VectorDB"
:setvar DefaultDataPath "C:\Users\richi\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\richi\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Courses]...';


GO
CREATE TABLE [dbo].[Courses] (
    [Id]         INT            IDENTITY (1, 1) NOT NULL,
    [CourseName] VARCHAR (100)  NOT NULL,
    [Content]    VARCHAR (1000) NULL,
    CONSTRAINT [PK_Courses] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[StudentCourses]...';


GO
CREATE TABLE [dbo].[StudentCourses] (
    [Id]        INT IDENTITY (1, 1) NOT NULL,
    [StudentId] INT NOT NULL,
    [CourseId]  INT NOT NULL,
    CONSTRAINT [PK_StudentCourses] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[Students]...';


GO
CREATE TABLE [dbo].[Students] (
    [Id]         INT           IDENTITY (1, 1) NOT NULL,
    [FirstName]  VARCHAR (50)  NOT NULL,
    [MiddleName] VARCHAR (50)  NULL,
    [LastName]   VARCHAR (50)  NOT NULL,
    [Email]      VARCHAR (100) NOT NULL,
    CONSTRAINT [PK_Students] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[View_StudentCourses]...';


GO
CREATE VIEW [dbo].[View_StudentCourses]
AS 
SELECT SC.StudentId, C.CourseName 
FROM dbo.Courses C
INNER JOIN dbo.StudentCourses SC ON C.Id = SC.CourseId
GO
PRINT N'Creating [dbo].[ufn_GetCourseByStudentId]...';


GO
CREATE FUNCTION dbo.ufn_GetCourseByStudentId (@StudentId INT)  
RETURNS VARCHAR(200)
BEGIN
    
    DECLARE @courses VARCHAR(200)

    SET @courses = (SELECT STUFF( (SELECT ',' + CourseName 
               FROM dbo.View_StudentCourses p2
               WHERE p2.StudentId = p1.StudentId
               ORDER BY CourseName
               FOR XML PATH(''), TYPE).value('.', 'varchar(max)')
            ,1,1,'')
      AS Courses
      FROM dbo.View_StudentCourses p1 
      WHERE p1.StudentId = 1
      GROUP BY p1.StudentId)

    RETURN @courses
END
GO
PRINT N'Creating [dbo].[SP_Add_Student]...';


GO
CREATE PROCEDURE [dbo].[SP_Add_Student]
	@Id     	int output,
	@FirstName	varchar(50),
	@MiddleName	varchar(50),
	@LastName	varchar(50),	
	@Email		varchar(100)
AS
BEGIN
		INSERT INTO [dbo].[Students]
           ([FirstName],
		    [MiddleName],
            [LastName],
            [Email])
		VALUES
           (@FirstName,
		   @MiddleName,
           @LastName, 
           @Email);
		SET @Id = cast(scope_identity() as int)

		SELECT * FROM Students WHERE id = @Id;
END;
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

DELETE FROM [dbo].[Courses];

SET IDENTITY_INSERT [dbo].[Courses] ON;

INSERT INTO [Courses] ([Id], [CourseName], [Content])VALUES (1, 'Maths', 'Here we teach Maths');
INSERT INTO [Courses] ([Id], [CourseName], [Content])VALUES (2, 'English', 'Here we teach English');
INSERT INTO [Courses] ([Id], [CourseName], [Content])VALUES (3, 'Biology', 'Here we teach Biology');
INSERT INTO [Courses] ([Id], [CourseName], [Content])VALUES (4, 'Chemistory', 'Here we teach Chemistory');
INSERT INTO [Courses] ([Id], [CourseName], [Content])VALUES (5, 'Physics', 'Here we teach Physics');

SET IDENTITY_INSERT [dbo].[Courses] OFF;

DELETE FROM [dbo].[Students];

SET IDENTITY_INSERT [dbo].[Students] ON;

INSERT INTO [dbo].[Students] ([Id], [FirstName], [MiddleName], [LastName], [Email]) VALUES (1, 'Jordan', 'Michael', 'Goat', 'michael@bulls.com');
INSERT INTO [dbo].[Students] ([Id], [FirstName], [MiddleName], [LastName], [Email]) VALUES (2, 'LaBron', null, 'James', 'labron@lakers.com');
INSERT INTO [dbo].[Students] ([Id], [FirstName], [MiddleName], [LastName], [Email]) VALUES (3, 'Giannis', 'Greek', 'Antetokounmpo', 'giannis@bucks.com');
INSERT INTO [dbo].[Students] ([Id], [FirstName], [MiddleName], [LastName], [Email]) VALUES (4, 'Kevin', 'Samson', 'Durant', 'kevin@warriors.com');
INSERT INTO [dbo].[Students] ([Id], [FirstName], [MiddleName], [LastName], [Email]) VALUES (5, 'Kyrie', 'Drew', 'Irving', 'kyrie@celtics.com');
INSERT INTO [dbo].[Students] ([Id], [FirstName], [MiddleName], [LastName], [Email]) VALUES (6, 'James', 'King', 'Harden', 'james@rockets.com');

SET IDENTITY_INSERT [dbo].[Students] OFF;

DELETE FROM [dbo].[StudentCourses];

SET IDENTITY_INSERT [dbo].[StudentCourses] ON;

INSERT INTO [dbo].[StudentCourses] ([Id], [StudentId], [CourseId]) VALUES (1, 1, 1);
INSERT INTO [dbo].[StudentCourses] ([Id], [StudentId], [CourseId]) VALUES (2, 1, 2);
INSERT INTO [dbo].[StudentCourses] ([Id], [StudentId], [CourseId]) VALUES (3, 1, 5);
INSERT INTO [dbo].[StudentCourses] ([Id], [StudentId], [CourseId]) VALUES (4, 2, 2);
INSERT INTO [dbo].[StudentCourses] ([Id], [StudentId], [CourseId]) VALUES (5, 2, 4);
INSERT INTO [dbo].[StudentCourses] ([Id], [StudentId], [CourseId]) VALUES (6, 3, 1);
INSERT INTO [dbo].[StudentCourses] ([Id], [StudentId], [CourseId]) VALUES (7, 4, 4);
INSERT INTO [dbo].[StudentCourses] ([Id], [StudentId], [CourseId]) VALUES (8, 4, 5);
INSERT INTO [dbo].[StudentCourses] ([Id], [StudentId], [CourseId]) VALUES (9, 4, 1);
INSERT INTO [dbo].[StudentCourses] ([Id], [StudentId], [CourseId]) VALUES (10, 6, 2);

SET IDENTITY_INSERT [dbo].[StudentCourses] OFF;

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
